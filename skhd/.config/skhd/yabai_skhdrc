## Navigation (lalt - ...)


#scratchpad setup
cmd + alt - a : yabai -m window --toggle music || open  -a Music
cmd + alt - t : yabai -m window --toggle throwaway || open -a Alacritty
cmd + alt - h : yabai -m window --toggle home || open -a Home
cmd + alt - p : yabai -m window --toggle phone || open -a 'iPhone Mirroring'
cmd + alt - w : yabai -m window --toggle safari || open -a Safari
cmd + alt - s : yabai -m window --toggle slack || open -a Slack

rctrl - f : yabai -m window --toggle firefox || open  -a Firefox
rctrl - a : yabai -m window --toggle music || open  -a Music
rctrl - t : yabai -m window --toggle throwaway || open -a Alacritty
rctrl - h : yabai -m window --toggle home || open -a Home
rctrl - p : yabai -m window --toggle phone || open -a 'iPhone Mirroring'
rctrl - w : yabai -m window --toggle safari || open -a Safari
rctrl - i : yabai -m window --toggle iphone || open -a Simulator
rctrl - s : yabai -m window --toggle slack || open -a Slack
rctrl - m : yabai -m window --toggle messages || open -a Messages
rctrl - d : yabai -m window --toggle stream_deck || open -a Elgato\ Stream\ Deck
rctrl + shift - s : yabai -m window --toggle shortcut || open -a Shortcut

rctrl + shift - c : yabai -m window --toggle chat || open -a ChatGPTChrome
rctrl - c : yabai -m window --toggle chatgpt || open -a ChatGPT



# Space Navigation (four spaces per display): lalt - {1, 2, 3, 4}
lalt - 1 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[1] ]] && yabai -m space --focus $SPACES[1]
lalt - 2 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[2] ]] && yabai -m space --focus $SPACES[2]
lalt - 3 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[3] ]] && yabai -m space --focus $SPACES[3]
lalt - 4 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[4] ]] && yabai -m space --focus $SPACES[4]

# Moving windows between spaces: shift + lalt - {1, 2, 3, 4, p, n } (Assumes 4 Spaces Max per Display)
shift + lalt - 1 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[1] ]] \
                  && yabai -m window --space $SPACES[1]

shift + lalt - 2 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[2] ]] \
                  && yabai -m window --space $SPACES[2]

shift + lalt - 3 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[3] ]] \
                  && yabai -m window --space $SPACES[3]

shift + lalt - 4 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[4] ]] \
                  && yabai -m window --space $SPACES[4]

# Window Navigation (through display borders): lalt - {j, k, l, ö}
default, resize < lalt - h    : yabai -m window --focus west  || yabai -m display --focus west  || yabai -m display --focus 1
default, resize < lalt - j    : yabai -m window --focus south || yabai -m display --focus south || yabai -m display --focus 3
default, resize < lalt - k    : yabai -m window --focus north || yabai -m display --focus north
default, resize < lalt - l : yabai -m window --focus east  || yabai -m display --focus east || yabai -m display --focus 2

# floating window movement
# alt + ctrl + shift - left : yabai -m window --move rel:-50:0
# alt + ctrl + shift - right : yabai -m window --move rel:50:0
# alt + ctrl + shift - up : yabai -m window --move rel:0:-50
# alt + ctrl + shift - down : yabai -m window --move rel:0:50

window_management, leader < h : yabai -m window --focus west  || yabai -m display --focus west
# Extended Window Navigation: lalt - {h, ä}
# lalt - n : yabai -m window --focus  last
# lalt - n : yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .space, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | reverse | nth(index(map(select(.\"has-focus\" == true))) - 1).id")"
# lalt - p : yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | nth(index(map(select(.\"has-focus\" == true))) - 1).id")"
# Float / Unfloat window: lalt - space
# lalt - return : yabai -m window --toggle float; sketchybar --trigger window_focus

# Make window zoom to fullscreen: shift + lalt - z
cmd + ctrl - f : yabai -m window --toggle zoom-fullscreen; sketchybar --trigger window_focus

# Make window zoom to parent node: lalt - f 
lalt - z : yabai -m window --toggle zoom-parent; sketchybar --trigger window_focus

## Window Movement (shift + lalt - ...)
# Moving windows in spaces: shift + lalt - {j, k, l, ö}
shift + lalt - h : yabai -m window --warp west || $(yabai -m window --display west && sketchybar --trigger windows_on_spaces && yabai -m display --focus west && yabai -m window --warp last) || yabai -m window --move rel:-10:0
shift + lalt - j : yabai -m window --warp south || $(yabai -m window --display south && sketchybar --trigger windows_on_spaces && yabai -m display --focus south) || yabai -m window --move rel:0:10
shift + lalt - k : yabai -m window --warp north || $(yabai -m window --display north && sketchybar --trigger windows_on_spaces && yabai -m display --focus north) || yabai -m window --move rel:0:-10
shift + lalt - l : yabai -m window --warp east || $(yabai -m window --display east && sketchybar --trigger windows_on_spaces && yabai -m display --focus east && yabai -m window --warp first) || yabai -m window --move rel:10:0

# Toggle split orientation of the selected windows node: shift + lalt - s
# shift + lalt - s : yabai -m window --toggle split

# Moving windows between spaces: shift + lalt - {1, 2, 3, 4, p, n } (Assumes 4 Spaces Max per Display)
lalt - 1 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[1] ]] \
                  && yabai -m window --space $SPACES[1] \
                  && sketchybar --trigger windows_on_spaces

lalt - 2 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[2] ]] \
                  && yabai -m window --space $SPACES[2] \
                  && sketchybar --trigger windows_on_spaces

lalt - 3 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[3] ]] \
                  && yabai -m window --space $SPACES[3] \
                  && sketchybar --trigger windows_on_spaces

lalt - 4 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[4] ]] \
                  && yabai -m window --space $SPACES[4] \
                  && sketchybar --trigger windows_on_spaces

#TODO: add to window_management mode as single key
lalt - 0x21 : yabai -m space --focus prev # ALT + [
lalt - 0x1E : yabai -m space --focus next # ALT + ]

#TODO: add to window_management mode as single key? or as alt + p/n
shift + lalt - p : yabai -m window --space prev && yabai -m space --focus prev && sketchybar --trigger windows_on_spaces
shift + lalt - n : yabai -m window --space next && yabai -m space --focus next && sketchybar --trigger windows_on_spaces

# Mirror Space on X and Y Axis: shift + lalt - {x, y}
# shift + lalt - x : yabai -m space --mirror x-axis
# shift + lalt - y : yabai -m space --mirror y-axis

## Stacks (shift + ctrl - ...)
# Add the active window to the window or stack to the {direction}: shift + ctrl - {j, k, l, ö}
# TODO: add to window_management mode as control + hjkl?
shift + ctrl - h    : yabai -m window  west --stack $(yabai -m query --windows --window | jq -r '.id') && sketchybar --trigger window_focus
shift + ctrl - j    : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id') && sketchybar --trigger window_focus
shift + ctrl - k    : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id') && sketchybar --trigger window_focus
shift + ctrl - l : yabai -m window  east --stack $(yabai -m query --windows --window | jq -r '.id') && sketchybar --trigger window_focus

# Stack Navigation: shift + ctrl - {n, p}
# TODO: change to alt +shift?
shift + ctrl - n : yabai -m window --focus stack.next
shift + ctrl - p : yabai -m window --focus stack.prev

## TODO: Consder removing
# Resize windows: ctrl + lalt - {j, k, l, ö}
# ctrl + lalt - h     : yabai -m window --resize right:-100:0 || yabai -m window --resize left:-100:0
# ctrl + lalt - j    : yabai -m window --resize bottom:0:100 || yabai -m window --resize top:0:100
# ctrl + lalt - k    : yabai -m window --resize bottom:0:-100 || yabai -m window --resize top:0:-100
# ctrl + lalt - l : yabai -m window --resize right:100:0 || yabai -m window --resize left:100:0

# NOTE: consider adding to window mode
# Equalize size of windows: ctrl + lalt - e
# ctrl + lalt - e : yabai -m space --balance

# Enable / Disable gaps in current workspace: ctrl + lalt - g
# NOTE: consider adding to window mode
# ctrl + lalt - g : yabai -m space --toggle padding; yabai -m space --toggle gap

# NOTE: consider adding to window mode
# Enable / Disable gaps in current workspace: ctrl + lalt - g
# ctrl + lalt - b : yabai -m config window_border off 
# shift + ctrl + lalt - b : yabai -m config window_border on

## Insertion (shift + ctrl + lalt - ...)
# Set insertion point for focused container: shift + ctrl + lalt - {j, k, l, ö, s}
# TODO: add to window_management mode?
shift + ctrl + lalt - h : yabai -m window --insert west
shift + ctrl + lalt - j : yabai -m window --insert south
shift + ctrl + lalt - k : yabai -m window --insert north
shift + ctrl + lalt - l : yabai -m window --insert east
shift + ctrl + lalt - s : yabai -m window --insert stack

# New window in hor./ vert. splits for all applications with yabai
# lalt - s : yabai -m window --insert east;  skhd -k "cmd - n"
lalt - v : yabai -m window --insert south; skhd -k "cmd - n"

