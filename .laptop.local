#!/bin/sh

# NOTE: brew bundle install
brew install --cask homerow

brew bundle --file=- <<EOF

cask "arc" unless File.directory?("/Applications/Arc.app")
tap "FelixKratz/formulae"
# cask "skitch" unless File.directory?("/Applications/Skitch.app")
cask "vlc" unless File.directory?("/Applications/VLC.app")
cask "obs" unless File.directory?("/Applications/OBS.app")
cask "the-unarchiver" unless File.directory?("/Applications/The Unarchiver.app")
cask "obsidian" unless File.directory?("/Applications/Obsidian.app")
cask "alfred" unless File.directory?("/Applications/Alfred 5.app")
cask "plex" unless File.directory?("/Applications/Plex.app")

# font stuff
cask "font-jetbrains-mono" unless File.directory?("~/Library/Fonts/JetBrainsMono-Bold.ttf")

# GitHub extensions
brew "lazygit"

# recommended cli tools
cask "kitty" unless File.directory?("/Applications/kitty.app")
cask "alacritty" unless File.directory?("/Applications/Alacritty.app")
brew "tmux"
brew "nnn"
brew "ripgrep"
brew "neofetch"
# brew "universal-ctags"
brew "rename"
brew "dooit"
brew "btop"
brew "weechat"
# requires slack plugin

# tmux dependency
brew "stow"
brew "fzf"
brew "bat"

# GUI
brew "jq"
cask "alfred" unless File.directory?("/Applications/Alfred 5.app")
brew "koekeishiya/formulae/skhd"
brew "yabai"
brew "borders"
brew "svim"
brew "switchaudio-osx"




# mac utils
#brew install --cask spacelauncher
# cask "cleanmymac" unless File.directory?("/Applications/CleanMyMac X.app")
cask "raycast" unless File.directory?("/Applications/raycast.app")
# TODO:
# brew install --cask monitorcontrol
cask "betterdisplay" unless File.directory?("/Applications/BetterDisplay.app")
cask "elgato-stream-deck" unless File.directory?("/Applications/Elgato Stream Deck.app")

# remote

cask "cloudflare-warp" unless File.directory?("/Applications/Cloudflare WARP.app")
cask "parsec" unless File.directory?("/Applications/Parsec.app")


# other
# This needs to be version 20
# cask "parallels" unless File.directory?("/Applications/Parallels Desktop.app")
cask "keyboard-maestro" unless File.directory?("/Applications/Keyboard Maestro.app")
cask "balenaetcher" unless File.directory?("/Applications/balenaEtcher.app")

EOF


# NOTE: Mac App Store Apps
echo "Installing Mac App Store Apps..."
# mas install 1451685025 #Wireguard
mas install 1480933944 #Vimari
mas install 497799835  #xCode
mas install 1450504903 #nighteye
mas install 524141863  #Jump VNC
mas install 1099568401 #home assistant

# NOTE: macOS Settings
echo "Changing macOS defaults..."
# ensures that clicking on the desktop does not trigger "Show Desktop," helping prevent accidental hiding of windows.
defaults write com.apple.WindowManager EnableStandardClickToShowDesktop -bool false

# Enable browsing across all network interfaces in the Finder.
defaults write com.apple.NetworkBrowser BrowseAllInterfaces 1

# Prevent macOS from creating `.DS_Store` files on network drives.
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

# Prevent Spaces (virtual desktops) from spanning multiple displays.
defaults write com.apple.spaces spans-displays -bool false

# Automatically hide the Dock when not in use.
defaults write com.apple.dock autohide -bool true

# Disable rearranging of Spaces based on recent use.
defaults write com.apple.dock "mru-spaces" -bool "false"

# Disable window opening animations (e.g., when opening new windows).
defaults write NSGlobalDomain NSAutomaticWindowAnimationsEnabled -bool false

# Disable the quarantine dialog for downloaded applications.
defaults write com.apple.LaunchServices LSQuarantine -bool false

# Disable "natural" (inverted) scrolling direction for trackpads and mice.
defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

# Set the keyboard key repeat rate to the fastest setting.
defaults write NSGlobalDomain KeyRepeat -int 1

# Disable automatic spelling correction.
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

# Show all file extensions in Finder.
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Auto-hide the macOS menu bar.
defaults write NSGlobalDomain _HIHideMenuBar -bool true

# Set the highlight color to a custom RGB value (light green in this case).
defaults write NSGlobalDomain AppleHighlightColor -string "0.65098 0.85490 0.58431"

# Set the accent color (1 = blue).
defaults write NSGlobalDomain AppleAccentColor -int 1

# Disable shadows in screenshots.
defaults write com.apple.screencapture disable-shadow -bool true

# Set the default screenshot format to PNG.
defaults write com.apple.screencapture type -string "png"

# Disable Finder animations (e.g., opening folders).
defaults write com.apple.finder DisableAllAnimations -bool true

# Hide external hard drives from the desktop.
defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false

# Hide internal hard drives from the desktop.
defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false

# Hide mounted servers from the desktop.
defaults write com.apple.finder ShowMountedServersOnDesktop -bool false

# Hide removable media from the desktop.
defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false

# Show all hidden files in Finder (e.g., dotfiles).
defaults write com.apple.Finder AppleShowAllFiles -bool true

# Set the default Finder search scope to "current folder."
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Disable the warning dialog when changing file extensions.
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# Show the full POSIX path in the Finder title bar.
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

# Set the default Finder view style to list view ("Nlsv").
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

# Hide the Finder status bar.
defaults write com.apple.finder ShowStatusBar -bool false

# Prevent Time Machine from offering new disks for backup.
defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool YES

# Disable Safari from automatically opening "safe" files after downloading.
# defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

# Enable the Develop menu in Safari.
sudo defaults write com.apple.Safari IncludeDevelopMenu -bool true

# Enable WebKit developer extras in Safari.
sudo defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true

# Enable WebKit developer extras for Safari's WebKit2 framework.
sudo defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

# Enable WebKit developer extras globally.
defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

# Exclude names when copying email addresses from Mail to the clipboard.
defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false

# Enable dragging windows using a three-finger gesture on the trackpad.
defaults write -g NSWindowShouldDragOnGesture YES

# Set a custom location for saving screenshots (in ~/Documents/Screenshots).
defaults write com.apple.screencapture location ~/Documents/Screenshots

# NOTE: Installing Fonts
git clone git@github.com:shaunsingh/SFMono-Nerd-Font-Ligaturized.git /tmp/SFMono_Nerd_Font
mv /tmp/SFMono_Nerd_Font/* $HOME/Library/Fonts
rm -rf /tmp/SFMono_Nerd_Font/

curl -L https://github.com/kvndrsslr/sketchybar-app-font/releases/download/v1.0.4/sketchybar-app-font.ttf -o $HOME/Library/Fonts/sketchybar-app-font.ttf

#NOTE: install OHMZSH

if [ ! -d "$HOME/.oh-my-zsh" ]; then
  echo "Installing Oh My Zsh..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
else
  echo "Oh My Zsh is already installed. Skipping installation."
fi

# NOTE: zsh plugins and powerlevel10k and clone repos

mkdir development

repos=(
  "git@github.com:zsh-users/zsh-autosuggestions.git $HOME/.config/zsh-plugins/zsh-autosuggestions"
  "git@github.com:jeffreytse/zsh-vi-mode.git $HOME/.config/zsh-plugins/zsh-vi-mode"
  "git@github.com:zsh-users/zsh-syntax-highlighting.git $HOME/.config/zsh-plugins/zsh-syntax-highlighting"
  "git@github.com:marlonrichert/zsh-autocomplete.git $HOME/.config/zsh-plugins/zsh-autocomplete"
  "git@github.com:romkatv/powerlevel10k.git $HOME/.config/zsh-plugins/powerlevel10k"
  "git@github.com:MyMOC/mymoc.git $HOME/mymoc"
  "git@github.com:MyMOC/mobilemoc.git $HOME/development/mobilemoc"
  "git@github.com:MyMOC/front-end.git $HOME/development/front-end"
  "git@github.com:MyMOC/utilities.git $HOME/development/utilities_mymoc"
)

# Clone repositories
for repo in "${repos[@]}"; do
  repo_url=$(echo "$repo" | awk '{print $1}')
  target_dir=$(echo "$repo" | awk '{print $2}')

  # Ensure the parent directory exists
  parent_dir=$(dirname "${target_dir/#\~/$HOME}")
  if [ ! -d "$parent_dir" ]; then
    echo "Creating directory $parent_dir..."
    mkdir -p "$parent_dir"
  fi

  # Clone the repository if it doesn't already exist
  if [ ! -d "${target_dir/#\~/$HOME}" ]; then
    echo "Cloning $repo_url into ${target_dir/#\~/$HOME}..."
    git clone --depth=1 "$repo_url" "${target_dir/#\~/$HOME}"
  else
    echo "Repository already exists at ${target_dir/#\~/$HOME}. Skipping clone."
  fi
done
#  #  "zsh-autosuggestions"
#  git clone https://github.com/zsh-users/zsh-autosuggestions $HOME/.config/zsh-plugins/zsh-autosuggestions
#  #  "zsh-vi-mode"
#  git clone https://github.com/jeffreytse/zsh-vi-mode.git $HOME/.config/zsh-plugins/zsh-vi-mode
#  #  "zsh-syntax-highlighting"
#  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.config/zsh-plugins/zsh-syntax-highlighting
#  # "zsh-autocomplete
#  git clone https://github.com/marlonrichert/zsh-autocomplete.git $HOME/.config/zsh-plugins/zsh-autocomplete
#
# NOTE: zshrc setup

append_to_zshrc "$(
	cat <<EOF
if [[ "$(uname)" == "Darwin" ]]; then
  if [ -f ~/.config/zsh/macos.zsh ]; then
    source ~/.config/zsh/macos.zsh
  fi
fi

if [ -f ~/.config/zsh/general.zsh ]; then
  source ~/.config/zsh/general.zsh
fi

if [ -f ~/.config/zsh/plugins.zsh ]; then
  source ~/.config/zsh/plugins.zsh
else
  echo "plugins.zsh file not found"
fi
EOF
)"

source $HOME/.zshrc
cfg config --local status.showUntrackedFiles no

fancy_echo "Cleaning up old Homebrew formulae ..."
brew cleanup

#TODO: setup powerlevel10k and OHMZSH
#TODO: setup tmux plugins

#if [ -r "$HOME/.rcrc" ]; then
#  fancy_echo "Updating dotfiles ..."
# rcup
#fi

skhd --start-service
yabai --start-service

# NOTE: SSH key for development machine
SSH_KEY_PATH="$HOME/.ssh/ubuntu_id_rsa"

# Check if the SSH key exists
if [ ! -f "$SSH_KEY_PATH" ]; then
  fancy_echo "SSH key not found. Generating a new SSH key at $SSH_KEY_PATH..."

  # Generate the SSH key without a passphrase
  ssh-keygen -t rsa -b 4096 -f "$SSH_KEY_PATH" -N "" -C "coakleymjohn@gmail.com"

  fancy_echo "SSH key generated successfully!"
  fancy_echo "remember to add your ssh key to development machine"
  fancy_echo "cat ~/.ssh/ubuntu_id_rsa.pub | pbcopy"
  cat ~/.ssh/ubuntu_id_rsa.pub | pbcopy
else
  fancy_echo "SSH key already exists at $SSH_KEY_PATH. Skipping generation."
fi


# TODO: Setup tmux config with stow
# clean up scripts that i dont use..
# todo add install for kitty scroll back
fancy_echo "please setup kitty scrollback"
fancy_echo "https://github.com/mikesmithgh/kitty-scrollback.nvim"
